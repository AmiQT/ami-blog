---
export interface Props {
  post: any;
  content: any;
}

const { post, content } = Astro.props;

// Calculate reading time (average 200 words per minute)
const wordCount = content.body ? content.body.split(' ').length : 0;
const readingTime = Math.ceil(wordCount / 200);

// Format date
const formattedDate = post.data.pubDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Get related posts (same tags)
const { getCollection } = await import('astro:content');
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug && p.data.tags.some(tag => post.data.tags.includes(tag)))
  .slice(0, 3)
  .map(p => ({
    ...p,
    body: p.body || ''
  }));

// Extract headings for table of contents
const extractHeadings = (content: string) => {
  const headingRegex = /^#{1,6}\s+(.+)$/gm;
  const headings: Array<{ level: number; text: string; id: string }> = [];
  let match;
  
  while ((match = headingRegex.exec(content)) !== null) {
    const level = match[0].indexOf(' ');
    const text = match[1];
    const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
    headings.push({ level, text, id });
  }
  
  return headings;
};

const headings = extractHeadings(content.body || '');
---

<article class="max-w-4xl mx-auto relative">
  <!-- Reading Progress Bar -->
  <div class="fixed top-0 left-0 w-full h-1 bg-gray-200 z-50">
    <div id="reading-progress" class="h-full bg-blue-600 transition-all duration-300" style="width: 0%"></div>
  </div>

  <!-- Table of Contents (Desktop) -->
  {headings.length > 0 && (
    <div class="hidden lg:block fixed top-20 right-8 w-64 max-h-screen overflow-y-auto bg-white rounded-lg shadow-sm border border-gray-200 p-4 z-40">
      <h3 class="text-sm font-semibold text-gray-900 mb-3 uppercase tracking-wide">
        Table of Contents
      </h3>
      <nav class="space-y-1">
        {headings.map((heading) => (
          <a 
            href={`#${heading.id}`}
            class={`block text-sm hover:text-blue-600 transition-colors ${
              heading.level === 1 ? 'font-medium text-gray-900' :
              heading.level === 2 ? 'text-gray-800 ml-2' :
              'text-gray-600 ml-4'
            }`}
          >
            {heading.text}
          </a>
        ))}
      </nav>
    </div>
  )}

  <!-- Article Header -->
  <header class="mb-12">
    <!-- Meta Information -->
    <div class="flex items-center text-sm text-gray-500 mb-6">
      <time datetime={post.data.pubDate.toISOString()}>
        {formattedDate}
      </time>
      <span class="mx-3">•</span>
      <span>{readingTime} min read</span>
      {post.data.updatedDate && (
        <>
          <span class="mx-3">•</span>
          <span class="text-blue-600">Updated: {post.data.updatedDate.toLocaleDateString()}</span>
        </>
      )}
    </div>

    <!-- Title -->
    <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-8 leading-tight tracking-tight">
      {post.data.title}
    </h1>

    <!-- Description -->
    <p class="text-xl text-gray-600 mb-8 leading-relaxed">
      {post.data.description}
    </p>

    <!-- Tags -->
    {post.data.tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-8">
        {post.data.tags.map((tag: string) => (
          <span class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
            {tag}
          </span>
        ))}
      </div>
    )}

    <!-- Author Info -->
    <div class="bg-gray-50 p-6 rounded-lg border border-gray-200">
      <div class="flex items-center">
        <div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold text-lg mr-4">
          AI
        </div>
        <div>
          <div class="font-semibold text-gray-900 mb-1">AI Review Team</div>
          <div class="text-gray-600 text-sm">Expert AI Analysts & Researchers</div>
        </div>
      </div>
    </div>
  </header>

  <!-- Table of Contents (Mobile) -->
  {headings.length > 0 && (
    <div class="lg:hidden mb-8 bg-gray-50 rounded-lg border border-gray-200 p-4">
      <h3 class="text-sm font-semibold text-gray-900 mb-3 uppercase tracking-wide">
        Table of Contents
      </h3>
      <nav class="space-y-1">
        {headings.map((heading) => (
          <a 
            href={`#${heading.id}`}
            class={`block text-sm hover:text-blue-600 transition-colors ${
              heading.level === 1 ? 'font-medium text-gray-900' :
              heading.level === 2 ? 'text-gray-800 ml-2' :
              'text-gray-600 ml-4'
            }`}
          >
            {heading.text}
          </a>
        ))}
      </nav>
    </div>
  )}

  <!-- Article Content -->
  <div class="prose prose-lg max-w-none mb-16" id="article-content">
    <slot />
  </div>

  <!-- Social Sharing -->
  <div class="border-t border-gray-200 pt-8 mb-12">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">
      Share this article
    </h3>
    <div class="flex flex-wrap gap-3">
      <a href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.data.title)}&url=${encodeURIComponent(Astro.url.href)}`}
         target="_blank"
         rel="noopener noreferrer"
         class="flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm">
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
          <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
        </svg>
        Share on Twitter
      </a>
      <a href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
         target="_blank"
         rel="noopener noreferrer"
         class="flex items-center px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-800 transition-colors text-sm">
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
        </svg>
        Share on LinkedIn
      </a>
      <button onclick="navigator.clipboard.writeText(window.location.href)"
              class="flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        Copy Link
      </button>
    </div>
  </div>

  <!-- Related Articles -->
  {relatedPosts.length > 0 && (
    <div class="border-t border-gray-200 pt-8">
      <h3 class="text-2xl font-bold text-gray-900 mb-6">
        Related Articles
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        {relatedPosts.map((relatedPost) => (
          <article class="group">
            <div class="mb-3">
              <time class="text-sm text-gray-500">
                {relatedPost.data.pubDate.toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric'
                })}
              </time>
            </div>
            <h4 class="text-lg font-semibold mb-2 group-hover:text-blue-600 transition-colors">
              <a href={`/blog/${relatedPost.slug}`}>
                {relatedPost.data.title}
              </a>
            </h4>
            <p class="text-gray-600 text-sm leading-relaxed mb-3">
              {relatedPost.data.description}
            </p>
            <a href={`/blog/${relatedPost.slug}`} class="text-blue-600 hover:text-blue-800 font-medium text-sm">
              Read More →
            </a>
          </article>
        ))}
      </div>
    </div>
  )}

  <style>
    /* Clean, TechCrunch-inspired typography */
    .prose {
      color: #374151;
      font-size: 1.125rem;
      line-height: 1.8;
      max-width: none;
      margin: 0;
    }

    /* Large, prominent headings */
    .prose h1 {
      color: #111827;
      font-size: 2.5rem;
      font-weight: 700;
      margin-top: 3rem;
      margin-bottom: 1.5rem;
      line-height: 1.2;
      letter-spacing: -0.025em;
      scroll-margin-top: 2rem;
    }

    .prose h2 {
      color: #111827;
      font-size: 2rem;
      font-weight: 600;
      margin-top: 3rem;
      margin-bottom: 1rem;
      line-height: 1.3;
      letter-spacing: -0.025em;
      scroll-margin-top: 2rem;
    }

    .prose h3 {
      color: #111827;
      font-size: 1.5rem;
      font-weight: 600;
      margin-top: 2.5rem;
      margin-bottom: 1rem;
      line-height: 1.4;
      scroll-margin-top: 2rem;
    }

    .prose h4 {
      color: #111827;
      font-size: 1.25rem;
      font-weight: 600;
      margin-top: 2rem;
      margin-bottom: 0.75rem;
      line-height: 1.4;
      scroll-margin-top: 2rem;
    }

    .prose h5 {
      color: #111827;
      font-size: 1.125rem;
      font-weight: 600;
      margin-top: 1.5rem;
      margin-bottom: 0.5rem;
      line-height: 1.4;
      scroll-margin-top: 2rem;
    }

    .prose h6 {
      color: #111827;
      font-size: 1rem;
      font-weight: 600;
      margin-top: 1.5rem;
      margin-bottom: 0.5rem;
      line-height: 1.4;
      scroll-margin-top: 2rem;
    }

    /* Clean paragraphs with good spacing */
    .prose p {
      margin-bottom: 1.5rem;
      line-height: 1.8;
      color: #374151;
      font-size: 1.125rem;
    }

    /* Simple lists */
    .prose ul, .prose ol {
      margin-bottom: 1.5rem;
      padding-left: 1.5rem;
    }

    .prose li {
      margin-bottom: 0.5rem;
      line-height: 1.7;
      color: #374151;
    }

    .prose ul li {
      list-style-type: disc;
    }

    .prose ol li {
      list-style-type: decimal;
    }

    /* Clean blockquotes */
    .prose blockquote {
      border-left: 4px solid #3b82f6;
      padding: 1.5rem 2rem;
      margin: 2rem 0;
      font-style: italic;
      color: #6b7280;
      background-color: #f9fafb;
      border-radius: 0 0.5rem 0.5rem 0;
    }

    /* Simple code styling */
    .prose code {
      background-color: #f3f4f6;
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      font-size: 0.875rem;
      color: #dc2626;
      font-weight: 500;
    }

    .prose pre {
      background-color: #1f2937;
      color: #f9fafb;
      padding: 1.5rem;
      border-radius: 0.5rem;
      overflow-x: auto;
      margin: 2rem 0;
    }

    .prose pre code {
      background: transparent;
      padding: 0;
      color: inherit;
      font-weight: normal;
    }

    /* Text emphasis */
    .prose strong {
      font-weight: 600;
      color: #111827;
    }

    .prose em {
      font-style: italic;
      color: #6b7280;
    }

    /* Clean links */
    .prose a {
      color: #2563eb;
      text-decoration: underline;
      text-decoration-thickness: 1px;
      text-underline-offset: 2px;
      transition: color 0.2s ease;
    }

    .prose a:hover {
      color: #1d4ed8;
    }

    /* Simple tables */
    .prose table {
      width: 100%;
      border-collapse: collapse;
      margin: 2rem 0;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      overflow: hidden;
    }

    .prose th {
      background-color: #f9fafb;
      color: #374151;
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      font-size: 0.875rem;
      border-bottom: 1px solid #e5e7eb;
    }

    .prose td {
      padding: 1rem;
      border-bottom: 1px solid #e5e7eb;
      color: #374151;
    }

    .prose tr:last-child td {
      border-bottom: none;
    }

    .prose tr:hover td {
      background-color: #f9fafb;
    }

    /* Simple images */
    .prose img {
      max-width: 100%;
      height: auto;
      border-radius: 0.5rem;
      margin: 2rem 0;
    }

    /* Clean horizontal rules */
    .prose hr {
      border: none;
      height: 1px;
      background-color: #e5e7eb;
      margin: 3rem 0;
    }

    /* Definition lists */
    .prose dl {
      margin: 1.5rem 0;
    }

    .prose dt {
      font-weight: 600;
      color: #111827;
      margin-bottom: 0.25rem;
    }

    .prose dd {
      margin-bottom: 1rem;
      color: #374151;
      padding-left: 1rem;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .prose {
        font-size: 1rem;
        line-height: 1.7;
      }

      .prose h1 {
        font-size: 2rem;
      }

      .prose h2 {
        font-size: 1.75rem;
      }

      .prose h3 {
        font-size: 1.375rem;
      }

      .prose blockquote {
        padding: 1rem 1.5rem;
      }

      .prose pre {
        padding: 1rem;
      }
    }

    /* Print styles */
    @media print {
      .prose {
        font-size: 12pt;
        line-height: 1.6;
      }

      .prose h1, .prose h2, .prose h3 {
        page-break-after: avoid;
      }

      .prose p, .prose blockquote {
        page-break-inside: avoid;
      }
    }
  </style>

  <script>
    // Reading progress indicator
    function updateReadingProgress() {
      const article = document.getElementById('article-content');
      const progressBar = document.getElementById('reading-progress');
      
      if (!article || !progressBar) return;
      
      const articleHeight = article.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const articleTop = article.offsetTop;
      
      const scrollPosition = scrollTop - articleTop;
      const maxScroll = articleHeight - windowHeight;
      
      if (scrollPosition <= 0) {
        progressBar.style.width = '0%';
      } else if (scrollPosition >= maxScroll) {
        progressBar.style.width = '100%';
      } else {
        const progress = (scrollPosition / maxScroll) * 100;
        progressBar.style.width = progress + '%';
      }
    }

    // Smooth scrolling for table of contents links
    function initSmoothScrolling() {
      const links = document.querySelectorAll('a[href^="#"]');
      
      links.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href');
          const targetElement = document.querySelector(targetId);
          
          if (targetElement) {
            const offsetTop = targetElement.offsetTop - 100; // Account for fixed header
            window.scrollTo({
              top: offsetTop,
              behavior: 'smooth'
            });
          }
        });
      });
    }

    // Initialize interactive features
    document.addEventListener('DOMContentLoaded', () => {
      updateReadingProgress();
      initSmoothScrolling();
      
      window.addEventListener('scroll', updateReadingProgress);
      window.addEventListener('resize', updateReadingProgress);
    });
  </script>
</article>
