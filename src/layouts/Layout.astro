---
import '../styles/global.css';
import Analytics from '../components/Analytics.astro';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
}

const {
  title,
  description = "Expert AI tool reviews and analysis. Find the perfect AI solutions for your needs with comprehensive, unbiased reviews.",
  image = "/images/ai-review-site-og.jpg",
  type = "website",
  publishedTime,
  modifiedTime,
  author = "AI Review Team",
  tags = []
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.url.origin);

// Structured data for the page
const structuredData = {
  "@context": "https://schema.org",
  "@type": type === "article" ? "Article" : "WebPage",
  "headline": title,
  "description": description,
  "url": canonicalURL.href,
  "image": new URL(image, Astro.url.origin).href,
  "publisher": {
    "@type": "Organization",
    "name": "AI Review Site",
    "logo": {
      "@type": "ImageObject",
      "url": new URL("/images/ai-review-site-logo.png", Astro.url.origin).href
    }
  },
  "author": {
    "@type": "Person",
    "name": author
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.href
  }
};

// Add article-specific structured data
if (type === "article" && publishedTime) {
  structuredData.datePublished = publishedTime;
  if (modifiedTime) {
    structuredData.dateModified = modifiedTime;
  }
  if (tags.length > 0) {
    structuredData.keywords = tags.join(", ");
  }
}

// Breadcrumb structured data
const breadcrumbData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": Astro.url.origin
    }
  ]
};

// Add current page to breadcrumbs
if (Astro.url.pathname !== "/") {
  const pathSegments = Astro.url.pathname.split("/").filter(Boolean);
  pathSegments.forEach((segment, index) => {
    const position = index + 2;
    const name = segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, " ");
    const item = `${Astro.url.origin}/${pathSegments.slice(0, index + 1).join("/")}`;
    
    breadcrumbData.itemListElement.push({
      "@type": "ListItem",
      "position": position,
      "name": name,
      "item": item
    });
  });
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL.href} />
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="keywords" content={tags.length > 0 ? tags.join(", ") : "AI tools, artificial intelligence, AI reviews, productivity tools, writing assistants, marketing AI"} />
    <meta name="author" content={author} />
    <meta name="robots" content="index, follow" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL.href} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url.origin).href} />
    <meta property="og:site_name" content="AI Review Site" />
    <meta property="og:locale" content="en_US" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL.href} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url.origin).href} />
    <meta property="twitter:creator" content="@aireviewsite" />
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#2563eb" />
    <meta name="msapplication-TileColor" content="#2563eb" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="AI Review Site" />
    
    <!-- Article-specific meta tags -->
    {type === "article" && publishedTime && (
      <meta property="article:published_time" content={publishedTime} />
    )}
    {type === "article" && modifiedTime && (
      <meta property="article:modified_time" content={modifiedTime} />
    )}
    {type === "article" && author && (
      <meta property="article:author" content={author} />
    )}
    {type === "article" && tags.length > 0 && (
      <>
        {tags.map((tag) => (
          <meta property="article:tag" content={tag} />
        ))}
      </>
    )}
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbData)} />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Preload critical resources -->
    <link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin />
    
    <!-- DNS prefetch for performance -->
    <link rel="dns-prefetch" href="//www.google-analytics.com" />
    <link rel="dns-prefetch" href="//www.googletagmanager.com" />
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global>
  html {
    font-family: system-ui, sans-serif;
    background: #fff;
    background-size: 224px;
  }
  code {
    background: #f1f1f1;
    color: #d13178;
    padding: 2px 6px;
    border-radius: 6px;
  }
</style>
